#include <windows.h>
#include <GL/glut.h>    
#include <stdlib.h>
#include <math.h>
#include <iostream>
#include <iomanip>

using namespace std;

float theta = 0.0; // global angular value for rotation
float scale1 = 1.0; // global scaling value for triangle
float dx = 7.0, dy = -3.0; // global movement value for dx and dy
int frame = 1;

void RenderScene(void); // this is a function to draw a triangle in an opened window
void loadicon(float[], float[]); /* loads the triangle icon */
void drawicon(float[], float[]); /* draws the icon */
void SetupRC(void); // sets up the clear color
void TimerFunction(int); // this call back function is called each 30 ms and changes the location, scale, and rotation
void setTrans(float dx, float dy, float theta, float scale); // Function to apply transformations

// Main Program
int main(int argc, char** argv) {
    char header[] = "ModelView Matrix || Blue Triangle by Lukas Siemers";

    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
    glutInitWindowSize(560, 440);
    glutInitWindowPosition(140, 20);
    SetupRC();
    glutCreateWindow(header);
    glutDisplayFunc(RenderScene);
    glutTimerFunc(30, TimerFunction, 1);
    glutMainLoop();

    return 0;
}

// ************************* RenderScene Function *************************
void RenderScene(void) {
    float px[3], py[3]; // these variables hold the pattern for the triangle icon.
    loadicon(px, py); // load the triangle icon

    glClear(GL_COLOR_BUFFER_BIT); // Clear the window with the background color

    // Set the current drawing color to white
    glColor3f(1.0, 1.0, 1.0);

    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glViewport(0, 0, 540, 440);
    glOrtho(-7.0, 7.0, -7.0, 7.0, 1.0, -1.0);

    // Apply transformations using the setTrans function
    setTrans(dx, dy, theta, scale1);

    // Draw the transformed triangle
    drawicon(px, py);

    glEnd();
    glutSwapBuffers();

    return;
}




// ****************************** Load Icon Function ************************************
void loadicon(float px[], float py[]) {
    px[0] = 0.0; py[0] = 1.0; // Top of the triangle
    px[1] = 1.0; py[1] = 0.0; // Bottom right of the triangle
    px[2] = -1.0; py[2] = 0.0; // Bottom left of the triangle
}





/************************* function drawicon ***************************/
void drawicon(float px[], float py[]) {
    glBegin(GL_LINE_LOOP);
    for (int i = 0; i < 3; i++) {
        glVertex2f(px[i], py[i]);
    }
    glEnd();

    // Fill one half of the triangle with red color
    glColor3f(0.0, 0.0, 1.0);
    glBegin(GL_TRIANGLES);
    glVertex2f(px[0], py[0]);
    glVertex2f((px[1] + px[2]) / 2.0, (py[1] + py[2]) / 2.0); // Midpoint of the base
    glVertex2f(px[1], py[1]);
    glEnd();
}





// **************************** Function SetupRC *************************************
void SetupRC(void) {
    glClearColor(0.0, 0.0, 0.0, 0.0);
}






/************************** Function setTrans ***************************/
void setTrans(float dx, float dy, float theta, float scale) {
    // This function encapsulates the transformations using the Modelview Matrix
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    glTranslatef(dx, dy, 0.0);  // Apply translation
    glRotatef(theta, 0.0, 0.0, 1.0);  // Apply rotation
    glScalef(scale, scale, 1.0);      // Apply scaling
}

/******************************** Function Timer ****************************************/
void TimerFunction(int value) {
    switch (frame) {
    case 1:
        theta += 5.0;  // Rotate
        dx -= 0.15;    // Move left
        if (dx <= 0.0) {
            dx = 0.0;
            frame = 2;
        }
        break;
    case 2:
        dy += 0.2;  // Move up
        if (dy > 5.0) {
            dy = 5.0;
            frame = 3;
        }
        break;
    case 3:
        theta += 5.0;  // Continue rotating
        if (theta >= 610.0) { // One full rotation
            frame = 4;
        }
        break;
    case 4:
        dy -= 0.2;  // Move down
        if (dy <= -3.0) {
            dy = -3.0;
            frame = 5;
        }
        break;
    case 5:
        dx -= 0.15;  // Roll off the stage
        theta += 5.0;
        if (dx <= -6.5) dx = -6.5;
        break;
    }

    // Redraw the scene with new coordinates
    glutPostRedisplay();
    glutTimerFunc(33, TimerFunction, 1);
}
