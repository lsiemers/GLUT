#include <windows.h>
#include <GL/glut.h>    
#include <stdlib.h>
#include <math.h>
#include <iostream>

using namespace std;


float angle = 0.0;

void DrawAllIcons(
    float x[], float y[], int ndraws, int pointsperdraw[], int drawtype[], float colorr[], float colorg[], float colorb[], float rotate, float scalex, float scaley, float transx, float transy) {
    // Use MODELVIEW matrix
    glMatrixMode(GL_MODELVIEW);

    glPushMatrix();

    // Apply transformations: translate, rotate, scale
    glTranslatef(transx, transy, 0.0);
    glRotatef(rotate, 0.0, 0.0, 1.0); // Rotate about Z-axis
    glScalef(scalex, scaley, 1.0f); // Scale in x and y

    int index = 0; // Index into x[] and y[]
    for (int i = 0; i < ndraws; ++i) {
        glColor3f(colorr[i], colorg[i], colorb[i]); // Set the color for this draw


        GLenum mode;
        if (drawtype[i] == 1)
            mode = GL_LINES;
        else if (drawtype[i] == 2)
            mode = GL_LINE_STRIP;
        else if (drawtype[i] == 3)
            mode = GL_POLYGON;

        glBegin(mode);

        for (int j = 0; j < pointsperdraw[i]; ++j) {         // Draw the points
            glVertex2f(x[index], y[index]);
            ++index;
        }
        glEnd();
    }
    glPopMatrix();
}

void display(void) {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    // Square Icon
    {
        float x[7];
        float y[7];

        // First draw: Square
        x[0] = 1.0; y[0] = 1.0;
        x[1] = 1.0; y[1] = -1.0;
        x[2] = -1.0; y[2] = -1.0;
        x[3] = -1.0; y[3] = 1.0;
        x[4] = 1.0; y[4] = 1.0;

        // Second draw: Line 
        x[5] = 0.0; y[5] = 2.0;
        x[6] = 0.0; y[6] = -2.0;

        int ndraws = 2;
        int pointsperdraw[] = { 5, 2 };
        int drawtype[] = { 3, 1 }; // GL_LINE_STRIP, GL_LINES
        float colorr[] = { 1.0, 1.0 };
        float colorg[] = { 0.0, 1.0 };
        float colorb[] = { 0.0, 1.0 };

        float rotate_angle = angle;
        float scalex = 2.0;     //Size of the icon
        float scaley = 2.0;	    //Size of the icon
        float transx = 5.0;     //Location of the icon
        float transy = 5.0;	    //Location of the icon

        DrawAllIcons(x, y, ndraws, pointsperdraw, drawtype, colorr, colorg, colorb, rotate_angle, scalex, scaley, transx, transy); // Draw the icon
    }

    // Trapezoid Icon
    {
        float x[7];
        float y[7];

        // First draw: Trapezoid
        x[0] = 1.0; y[0] = 1.0;
        x[1] = 1.5; y[1] = -1.0;
        x[2] = -1.5; y[2] = -1.0;
        x[3] = -1.0; y[3] = 1.0;
        x[4] = 1.0; y[4] = 1.0;

        // Second draw: Line
        x[5] = 0.0; y[5] = 2.0;
        x[6] = 0.0; y[6] = -2.0;

        int ndraws = 2;
        int pointsperdraw[] = { 5, 2 };
        int drawtype[] = { 3, 1 }; // GL_LINE_STRIP, GL_LINES
        float colorr[] = { 0.0, 1.0 };
        float colorg[] = { 1.0, 1.0 };
        float colorb[] = { 0.0, 1.0 };

        float rotate_angle = angle;
        float scalex = 2.0;     //Size of the icon
        float scaley = 2.0;     //Size of the icon
        float transx = -5.0;    //Location of the icon
        float transy = -5.0;	//Location of the icon

        DrawAllIcons(x, y, ndraws, pointsperdraw, drawtype,
            colorr, colorg, colorb, rotate_angle,
            scalex, scaley, transx, transy);
    }

    // Composite Icon (Square on Trapezoid)
    {

        float x[12];
        float y[12];

        // First draw: Square 
        x[0] = 1.0; y[0] = 1.0;
        x[1] = 1.0; y[1] = 0.0;
        x[2] = -1.0; y[2] = 0.0;
        x[3] = -1.0; y[3] = 1.0;
        x[4] = 1.0; y[4] = 1.0;

        // Second draw: Trapezoid 
        x[5] = 1.5; y[5] = 0.0;
        x[6] = 2.0; y[6] = -1.0;
        x[7] = -2.0; y[7] = -1.0;
        x[8] = -1.5; y[8] = 0.0;
        x[9] = 1.5; y[9] = 0.0;

        // Third draw: Line 
        x[10] = 0.0; y[10] = 3.0;
        x[11] = 0.0; y[11] = -3.0;

        int ndraws = 3;
        int pointsperdraw[] = { 5, 5, 2 };
        int drawtype[] = { 3, 3, 1 }; // GL_LINE_STRIP, GL_LINE_STRIP, GL_LINES
        float colorr[] = { 1.0, 0.0, 1.0 };
        float colorg[] = { 0.0, 1.0, 1.0 };
        float colorb[] = { 0.0, 0.0, 1.0 };

        float rotate_angle = angle;
        float scalex = 1.0;	    //Size of the icon
        float scaley = 1.0;     //Size of the icon
        float transx = 0.0;     //Location of the icon
        float transy = 0.0;     //Location of the icon

        DrawAllIcons(x, y, ndraws, pointsperdraw, drawtype,
            colorr, colorg, colorb, rotate_angle,
            scalex, scaley, transx, transy);
    }

    glutSwapBuffers();
}

void idle(void) {
    angle += 0.01;       //Speed of rotation
    if (angle > 360.0)
        angle -= 360.0;
    glutPostRedisplay();
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
    glutInitWindowSize(800, 600);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("Draw All Icons by Lukas Siemers");
    glClearColor(0.0, 0.0, 0.0, 0.0);
    glShadeModel(GL_FLAT);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(-10.0, 10.0, -10.0, 10.0);

    glutDisplayFunc(display);
    glutIdleFunc(idle);

    glutMainLoop();
    return 0;
}
