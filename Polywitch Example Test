#include <windows.h>
#include <GL/glut.h>
#include <stdlib.h>
#include <math.h>
#include <stdio.h>
#include <iostream>
#include <iomanip>

using namespace std;

// This is CubeAndBezierStudentDemo.cpp
/* This program demonstrates rendering a three-dimensional cube in OpenGL. The program
renders the cube in solid form using the function glEnable(GL_DEPTH_TEST) to activate
the z-buffer to hide hidden surfaces. The surfaces of the cube are rendered by
glBegin(GL_POLYGON). All faces have been loaded counterclockwise.
It also demonstrates a Bézier path for the cube to follow. The Bézier path is generated
with 6 control points along the path from the Bézier function calcbiezu(float, int, float[]).
*/

//*********** Global values ************************************************
/* These values are global because the timing callback functions will only take certain
parameters; hence, there need to be global variables to communicate with these functions.
*/
static float theta = 0.0, theta2 = 5.0; // Global angular value for rotation
float scale1 = 1.0;                     // Global scaling value for the cube
float dx = 0.0, dy = 0.0, dz = 0.0;     // Global movement values for dx, dy, dz

float xctrl[6], yctrl[6], uval = 0.0; // Bézier control points for the cube's path

// Function prototypes
float calcbiezu(float, int, float[]); // Calculates Bézier value at a point u
int fact(int);                        // Calculates factorial
void RenderScene(void);               // Function to draw the scene
void loadicon(float[][5], float[][5], float[][5], float[], float[], float[]); // Loads the cube icon
void drawicon(float[][5], float[][5], float[][5], float[], float[], float[]); // Draws the icon
void settrans2(void);                 // Sets the transformation matrix for the cube
void SetupRC(void);                   // Sets up the rendering context
void TimerFunction(int);              // Callback function for animation

// Main Program
int main(int argc, char** argv)
{
    // Set up window title
    char header[] = "Bezier Cube Movement by Joe Student";

    glutInit(&argc, argv);
    // Set up the display mode with a double buffer and a depth buffer and RGB colors
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
    // Initialize window size and position
    glutInitWindowSize(1000, 1000);
    glutInitWindowPosition(0, 0);
    // Open and label the window
    glutCreateWindow(header);
    SetupRC();
    glutDisplayFunc(RenderScene);
    glutTimerFunc(500, TimerFunction, 1);
    // Enter the GLUT main loop
    glutMainLoop();
    return 0;
}

//************************* RenderScene Function *************************
void RenderScene(void)
{
    float x[6][5], y[6][5], z[6][5];
    float lx[2], ly[2], lz[2]; // Variables to hold the cube pattern and a line through the cube
    float x1, y1;
    float Uval; // Bézier u value ranging from 0 to 1 to drive the cube

    // Set up the control points
    xctrl[5] = -6.0;  yctrl[5] = 0.0;  // Left end point
    xctrl[4] = -2.0;  yctrl[4] = 0.0;  // Control point 1
    xctrl[3] = 3.0;  yctrl[3] = 5.0;  // Control point 2
    xctrl[2] = -3.0; yctrl[2] = 5.0;  // Control point 3
    xctrl[1] = -1.0;  yctrl[1] = 0.0;  // Control point 4
    xctrl[0] = 6.0; yctrl[0] = 0.0;  // Right end point

    int ncontrolpts = 6, i;

    // Clear the window with the current background color
    cout << "Rendering scene..." << endl;
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glEnable(GL_DEPTH_TEST);
    glLoadIdentity();

    // Set the drawing color to white
    glColor3f(1.0, 1.0, 1.0);

    // Set up the projection
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glViewport(0, 0, 1000, 1000);
    glOrtho(-12.0, 19.0, -12.0, 11.0, -15.0, 15.0);


    // Draw the control points
    glPointSize(5.0);
    glBegin(GL_POINTS);
    for (i = 0; i < ncontrolpts; i++)
        glVertex2f(xctrl[i], yctrl[i]);
    glEnd();

    // Draw the Bézier curve
    glColor3f(1.0, 0.0, 0.0);
    glBegin(GL_LINE_STRIP);
    Uval = 0.0;
    for (i = 0; i <= 200; i++){
        glVertex2f(calcbiezu(Uval, 5, xctrl), calcbiezu(Uval, 5, yctrl));
        Uval += 0.005;
    }
    glEnd();

    // Load and draw the cube
    loadicon(x, y, z, lx, ly, lz);
    settrans2();
    drawicon(x, y, z, lx, ly, lz);

    glutSwapBuffers();
}

//****************************** Load Icon Function ************************************
void loadicon(float x[][5], float y[][5], float z[][5], float xl[], float yl[], float zl[])
{
    // Load the cube vertices and colors

    // Front face (red)
    x[0][0] = -1.0; y[0][0] = 1.0;  z[0][0] = 1.0;
    x[0][1] = -1.0; y[0][1] = -1.0; z[0][1] = 1.0;
    x[0][2] = 1.0;  y[0][2] = -1.0; z[0][2] = 1.0;
    x[0][3] = 1.0;  y[0][3] = 1.0;  z[0][3] = 1.0;
    x[0][4] = 1.0;  y[0][4] = 0.0;  z[0][4] = 0.0; // Color

    // Right face (green)
    x[1][0] = 1.0;  y[1][0] = 1.0;  z[1][0] = 1.0;
    x[1][1] = 1.0;  y[1][1] = -1.0; z[1][1] = 1.0;
    x[1][2] = 1.0;  y[1][2] = -1.0; z[1][2] = -1.0;
    x[1][3] = 1.0;  y[1][3] = 1.0;  z[1][3] = -1.0;
    x[1][4] = 0.0;  y[1][4] = 1.0;  z[1][4] = 0.0; // Color

    // Back face (blue)
    x[2][0] = 1.0;   y[2][0] = 1.0;   z[2][0] = -1.0;
    x[2][1] = 1.0;   y[2][1] = -1.0;  z[2][1] = -1.0;
    x[2][2] = -1.0;  y[2][2] = -1.0;  z[2][2] = -1.0;
    x[2][3] = -1.0;  y[2][3] = 1.0;   z[2][3] = -1.0;
    x[2][4] = 0.0;   y[2][4] = 0.0;   z[2][4] = 1.0; // Color

    // Left face (white)
    x[3][0] = -1.0;  y[3][0] = 1.0;   z[3][0] = 1.0;
    x[3][1] = -1.0;  y[3][1] = 1.0;   z[3][1] = -1.0;
    x[3][2] = -1.0;  y[3][2] = -1.0;  z[3][2] = -1.0;
    x[3][3] = -1.0;  y[3][3] = -1.0;  z[3][3] = 1.0;
    x[3][4] = 1.0;   y[3][4] = 1.0;   z[3][4] = 1.0; // Color

    // Top face (yellow)
    x[4][0] = 1.0;   y[4][0] = 1.0;   z[4][0] = 1.0;
    x[4][1] = 1.0;   y[4][1] = 1.0;   z[4][1] = -1.0;
    x[4][2] = -1.0;  y[4][2] = 1.0;   z[4][2] = -1.0;
    x[4][3] = -1.0;  y[4][3] = 1.0;   z[4][3] = 1.0;
    x[4][4] = 1.0;   y[4][4] = 1.0;   z[4][4] = 0.0; // Color

    // Bottom face (cyan)
    x[5][0] = 1.0;   y[5][0] = -1.0;  z[5][0] = 1.0;
    x[5][1] = -1.0;  y[5][1] = -1.0;  z[5][1] = 1.0;
    x[5][2] = -1.0;  y[5][2] = -1.0;  z[5][2] = -1.0;
    x[5][3] = 1.0;   y[5][3] = -1.0;  z[5][3] = -1.0;
    x[5][4] = 0.0;   y[5][4] = 1.0;   z[5][4] = 1.0; // Color

    // Line through the cube
    xl[0] = 0.0; yl[0] = 3.0;  zl[0] = 0.0;
    xl[1] = 0.0; yl[1] = -3.0; zl[1] = 0.0;
}

//************************* Function drawicon *************************
void drawicon(float x[][5], float y[][5], float z[][5], float xl[], float yl[], float zl[])
{
    int i, face;
    for (face = 0; face < 6; face++)
    {
        glFrontFace(GL_CCW);
        glCullFace(GL_BACK);
        glEnable(GL_CULL_FACE);

        glColor3f(x[face][4], y[face][4], z[face][4]);
        glShadeModel(GL_FLAT);
        glBegin(GL_POLYGON);
        for (i = 0; i < 4; i++)
            glVertex3f(x[face][i], y[face][i], z[face][i]);
        glEnd();
    }

    // Render the line through the cube
    glColor3f(1.0, 0.5, 0.5);
    glBegin(GL_LINES);
    glVertex3f(xl[0], yl[0], zl[0]);
    glVertex3f(xl[1], yl[1], zl[1]);
    glEnd();

    glFlush();
}

//************************** Function settrans2 ***********************
void settrans2(void)
{
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();

    // Update the cube's position along the Bézier curve
    dx = calcbiezu(uval, 5, xctrl);
    dy = calcbiezu(uval, 5, yctrl);

    // Apply transformations
    glTranslatef(dx, dy, dz);
    glRotatef(theta, 0.0, 1.0, 0.0);
    glRotatef(theta2, 1.0, 1.0, 1.0);
}

//**************************** Function SetupRC *************************************
void SetupRC(void)
{
    // Set clear color to black
    glClearColor(0.0, 0.0, 0.0, 1.0);
}

//************************** Function TimerFunction *********************************
void TimerFunction(int value)
{
    // Update rotation angles
    theta += 2.0;
    theta2 += 5.0;
    // Update the u parameter for the Bézier curve
    uval += 0.001;
    if (uval >= 1.0) uval = 1.0;

    // Redraw the scene with new coordinates
    glutPostRedisplay();
    glutTimerFunc(15, TimerFunction, 1);
}

//************************** Bézier Calculation *************************
float calcbiezu(float u, int n, float cp[])
{
    // Calculates the Bézier value at u for the control points cp[]
    float val = 0.0;
    int i;
    for (i = 0; i <= n; i++)
    {
        float binomial = (float)fact(n) / (float)(fact(i) * fact(n - i));
        val -= cp[i] * binomial * pow(u, (float)i) * pow(1.0f - u, (float)(n - i)); //Modifyingh the Direction of movements
    }
    return val;
}

//************************** Factorial Calculation *************************
int fact(int n)
{
    // Calculates n!
    int fct = 1;
    if (n == 0) return 1;
    for (int counter = 1; counter <= n; counter++)
    {
        fct *= counter;
    }
    return fct;
}
