/*
TO DO:
Make his feet stop before jumping
Fix the Mouth (Opening and Closing)
Double check the feet coordinates


*/


#include <windows.h>
#include <GL/glut.h>    
#include <stdlib.h>
#include <math.h>
#include <iostream>

using namespace std;

// *********** Global values ************************************************
float theta = 0.0; // global angular value for rotation
float dx = 7.0, dy = -3.0; // global movement value for dx and dy
int frame = 1;
bool mouthOpen = false;

void RenderScene(void);
void loadicon(float[], float[]);
void drawicon(float[], float[]);
void settrans(float[][3], float, float, float);
float xprime(float, float, float[][3]);
float yprime(float, float, float[][3]);
void transform(float[], float[], float[][3], float[], float[]);
void SetupRC(void);
void TimerFunction(int);

// Main Program
int main(int argc, char** argv)
{
    // set up window title
    char header[] = "PolyMan Animation";

    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
    glutInitWindowSize(560, 440);
    glutInitWindowPosition(140, 20);
    SetupRC();
    glutCreateWindow(header);
    glutDisplayFunc(RenderScene);
    glutTimerFunc(30, TimerFunction, 1);
    glutMainLoop();

    return 0;
}

// ************************* RenderScene Function *************************
void RenderScene(void)
{
    float px[15], py[15]; // for body, mouth, eyes, and feet
    float pxp[15], pyp[15]; // transformed body, mouth, eyes, and feet
    float t[3][3]; // transformation matrix

    glClear(GL_COLOR_BUFFER_BIT);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glViewport(0, 0, 540, 440);
    glOrtho(-7.0, 7.0, -7.0, 7.0, 1.0, -1.0);

    loadicon(px, py);  // Load all points (body, mouth, eyes, feet)
    settrans(t, 1.0, dx, dy);  // Apply translation and rotation
    transform(pxp, pyp, t, px, py);  // Transform all points

    float walkAmplitude = 0.15;  // Height of walking animation
    float walkSpeed = 5.0;       // Walking speed (adjust for faster/slower walking)

    float time = glutGet(GLUT_ELAPSED_TIME) / walkSpeed;


    // Adjust the y-coordinates of the feet (indices 9-14) for a walking motion
    pyp[9] += walkAmplitude * sin(time);  // Foot #1 (9)
    pyp[10] += walkAmplitude * sin(time); // Foot #1 (10)
    pyp[11] += walkAmplitude * sin(time); // Foot #1 (11)
    pyp[12] += walkAmplitude * cos(time); // Foot #2 (12)
    pyp[13] += walkAmplitude * cos(time); // Foot #2 (13)
    pyp[14] += walkAmplitude * cos(time); // Foot #2 (14)
    
    drawicon(pxp, pyp);  // Draw transformed points

    glFlush();
    glutSwapBuffers();
}

// ****************************** Load Icon Function ************************************

void loadicon(float px[], float py[])
{
    // Hexagon body points and additional features (mouth, eyes, feet)
    px[0] = -9.0 / 8.0; py[0] = 0.0;            // Left middle point (1)
    px[1] = -5.0 / 8.0; py[1] = 3.0 / 4.0;      // Left top point (2)
    px[2] = 5.0 / 8.0;  py[2] = 3.0 / 4.0;      // Right top point (3)
    px[3] = 9.0 / 8.0;  py[3] = 0.0;            // Right middle point (4)
    px[4] = 5.0 / 8.0;  py[4] = -3.0 / 4.0;     // Right bottom point (5)
    px[5] = -5.0 / 8.0; py[5] = -3.0 / 4.0;     // Left bottom point (6)

    px[6] = -3.0 / 8.0; py[6] = 0.0;            // Mouth Open
    px[7] = -7.0 / 8.0; py[7] = -1.0 / 2.0;     // Mouth Closed #2

    px[8] = -1.0 / 2.0; py[8] = 1.0 / 2.0;      // Eye

    px[9] = -(1.0 / 4.0); py[9] = -(1.0 / 2.0);     // Foot #1
    px[10] = -(1.0 / 4.0); py[10] = -1.0;         // Foot #1
    px[11] = -(1.0 / 2.0); py[11] = -1.0;         // Foot #1
    px[12] = (1.0 / 4.0); py[12] = -(1.0 / 2.0);    // Foot #2
    px[13] = (1.0 / 4.0); py[13] = -1.0;          // Foot #2
    px[14] = 0; py[14] = -1.0;                  // Foot #2
}

/************************* function drawicon ***************************/
void drawicon(float pxp[], float pyp[])
{
    // Draw Polyman's body (hexagon) using the 6 transformed points
    glColor3f(0.0, 0.0, 0.0);  // Green fill for the body
    glBegin(GL_POLYGON); // Draw hexagon body
    for (int i = 0; i < 6; i++) {
        glVertex2f(pxp[i], pyp[i]);
    }
    glEnd();

    // Draw the outline of Polyman's body (hexagon shape)
    glColor3f(1.0, 0.0, 0.0); // Black outline for the body
    glBegin(GL_LINE_LOOP); // Draw hexagon outline
    for (int i = 0; i < 6; i++) {
        glVertex2f(pxp[i], pyp[i]);
    }
    glEnd();

    if (mouthOpen) {
        // Open mouth: Draw two lines and fill the background

        // Red color for the inside of the open mouth
        glColor3f(0.8, 0.0, 0.0);
        glBegin(GL_TRIANGLES);
        glVertex2f(pxp[6], pyp[6]);  // Mouth corner (left)
        glVertex2f(pxp[7], pyp[7]);  // Mouth corner (right)
        glVertex2f(pxp[0], pyp[0]);  // Mouth bottom
        glEnd();

        // Black color for the lines around the open mouth
        glColor3f(0.4, 0.0, 0.0);
        glBegin(GL_LINES);
        // Top line of the mouth
        glVertex2f(pxp[6], pyp[6]);
        glVertex2f(pxp[7], pyp[7]);
        // Bottom line of the mouth
        glVertex2f(pxp[6], pyp[6]);
        glVertex2f(pxp[0], pyp[0]);
        glVertex2f(pxp[7], pyp[7]);
        glVertex2f(pxp[0], pyp[0]);
        glEnd();
    }
    else {
        // Closed mouth: Draw a single straight line
        glColor3f(1.0, 0.0, 0.0);
        glBegin(GL_LINES);
        glVertex2f(pxp[6], pyp[6]);  // Mouth corner (left)
        glVertex2f(pxp[7], pyp[7]);  // Mouth corner (right)
        glEnd();
    }

    // Draw eyes
    glPointSize(5.0);
    glBegin(GL_POINTS);
    glColor3f(0.0, 0.0, 1.0);  // Blue color for the eyes
    glVertex2f(pxp[8], pyp[8]); // Eye
    glEnd();

    // Draw feet
    glPointSize(8.0);
    glBegin(GL_POLYGON);
    glColor3f(0.8, 0.3, 0.1); // Brownish color for feet
    for (int i = 9; i <= 14; i++) {
        glVertex2f(pxp[i], pyp[i]); // Draw feet using points 9 to 14
    }
    glEnd();
}

/************************** function settrans ***********************/
void settrans(float t[][3], float scale1, float dx, float dy)
{
    int i, j;
    float theta1, ct, st;

    // Setup identity matrix
    for (i = 0; i < 3; i++)
        for (j = 0; j < 3; j++)
        {
            t[i][j] = 0.0;
            if (i == j) t[i][j] = 1.0;
        }

    // Set rotation parameters
    theta1 = (3.1416 / 180.0) * theta;
    ct = cos(theta1);
    st = sin(theta1);
    t[0][0] = ct;
    t[0][1] = -st;
    t[1][0] = st;
    t[1][1] = ct;

    // Translate the figure
    t[2][0] = dx;
    t[2][1] = dy;

    return;
}

/****************** function xprime ***********************/
float xprime(float x1, float y1, float t[][3])
{
    return x1 * t[0][0] + y1 * t[1][0] + t[2][0];
}

/******************* function yprime ************************/
float yprime(float x1, float y1, float t[][3])
{
    return x1 * t[0][1] + y1 * t[1][1] + t[2][1];
}

/********************* function transform ********************/
void transform(float pxp[], float pyp[], float t[][3], float px[], float py[])
{
    // Transform all points
    for (int i = 0; i < 15; i++) {
        pxp[i] = xprime(px[i], py[i], t);
        pyp[i] = yprime(px[i], py[i], t);
    }
}

// **************************** Function SetupRC *************************************
void SetupRC(void)
{
    glClearColor(0.0, 0.0, 1.0, 1.0);
}

/******************************** Function Timer ****************************************/
/******************************** Function Timer ****************************************/
/******************************** Function Timer ****************************************/
void TimerFunction(int value)
{
    static float moveSpeed = 0.05;  // Adjust speed for forward movement
    static float jumpSpeed = 0.2;

    // Increment frame to drive the foot animation
    //frame++;

    switch (frame){
    case 1:
        dx -= moveSpeed;  // Polyman moves left to simulate walking forward
		theta += 0.0;   // No rotation for walking
        if (dx <= 0.0) {
            dx = 0.0;
			mouthOpen = true;   // Open the mouth for the jump
            frame = 2;
        }
        break;

	case 2: //Jumping in the middle
        dy += jumpSpeed;
        if (dy >= 2.0) {
            frame = 3;
        }
        break;

    case 3:
        theta += 5.0;
        if (theta >= 360.0) {
            frame = 4;
        }
        break;

    case 4:
        dy -= jumpSpeed;
        if (dy <= -3.0) {
			mouthOpen = false;  // Close the mouth after the jump
            frame = 5;
        }
        break;

    case 5:
        dx -= moveSpeed;  // Keep moving Polyman left as he walks
        theta += 0.0;
        if (dx <= -6.5) {
            dx = -6.5;
        }
        break;
    }

    

    // Update and redraw the scene
    glutPostRedisplay();
    glutTimerFunc(33, TimerFunction, 1);
}

